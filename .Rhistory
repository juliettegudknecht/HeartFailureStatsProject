heartdata <- read.table("/Users/tarunagrawal/Documents/GitHub/datascienceproject/heart_failure_clinical_records_dataset.csv",
header = TRUE,
sep = ",")
## clean data
head(heartdata)
# check for NA values
sum(is.na(heartdata))
#describe data
summary(heartdata)
str(heartdata)
# explore visualizing the data
library(ggplot2)
ggplot(heartdata, aes(x=age)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=anaemia)) +
geom_bar(color="white", fill="red")
colnames(heartdata)
# Making correction in Data Type:----
categoricalcolumns <- c("anaemia","smoking","sex","diabetes","DEATH_EVENT")
for( i in categoricalcolumns){
heartdata[,i] <- as.factor(heartdata[,i])
}
str(heartdata)
ggplot(heartdata, aes(x=age)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=anaemia)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=creatinine_phosphokinase)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=diabetes)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=ejection_fraction)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=high_blood_pressure)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=platelets)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=serum_creatinine)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=serum_sodium)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=sex)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=smoking)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=time)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=DEATH_EVENT)) +
geom_bar(color="white", fill="red")
# Checking Assumptions for Logistic Regression: ----
## Assumption 1: Binary Outcome (DEATH_EVENT) ----
table(heartdata$DEATH_EVENT)
library(tidyverse)
library(bestglm)
library(ggplot2)
# Applying Model:
model_test <- glm(DEATH_EVENT ~ ., family = binomial,
data = heartdata)
probabilities <- predict(model_test, type = "response")
data_check <- heartdata %>% select_if(is.numeric)
predictors <- colnames(data_check)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
# Bind the logit and tidying the data for plot
mydata <- heartdata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
# Plots for checking assumptions:
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
# Applying Model:
model_test <- glm(DEATH_EVENT ~ ., family = binomial,
data = heartdata)
probabilities <- predict(model_test, type = "response")
data_check <- heartdata %>% select_if(is.numeric)
predictors <- colnames(data_check)
# Bind the logit and tidying the data for plot
mydata <- data_check %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
# Plots for checking assumptions:
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
colnames(heartdata)
# Making correction in Data Type:----'
categoricalcolumns <- c("anaemia","smoking","sex","diabetes","DEATH_EVENT","high_blood_pressure")
for( i in categoricalcolumns){
heartdata[,i] <- as.factor(heartdata[,i])
}
str(heartdata)
ggplot(heartdata, aes(x=age)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=anaemia)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=creatinine_phosphokinase)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=diabetes)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=ejection_fraction)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=high_blood_pressure)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=platelets)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=serum_creatinine)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=serum_sodium)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=sex)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=smoking)) +
geom_bar(color="white", fill="red")
ggplot(heartdata, aes(x=time)) +
geom_histogram(color="white", fill="red")
ggplot(heartdata, aes(x=DEATH_EVENT)) +
geom_bar(color="white", fill="red")
table(heartdata$DEATH_EVENT)
# Applying Model:
model_test <- glm(DEATH_EVENT ~ ., family = binomial,
data = heartdata)
probabilities <- predict(model_test, type = "response")
data_check <- heartdata %>% select_if(is.numeric)
predictors <- colnames(data_check)
# Bind the logit and tidying the data for plot
mydata <- data_check %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
# Plots for checking assumptions:
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
## Auumption 3: ----
# No Influential Value in predictors:
resid(model_test)
library(MASS)
## Auumption 3: ----
# No Influential Value in predictors:
stud_resids <- studres(model_test)
ggplot(mapping = aes(x = probabilities , y = stud_resids)) + geom_point()
## Auumption 3: ----
# No Influential Value in predictors:
stud_resids <- resid(model_test)
ggplot(mapping = aes(x = probabilities , y = stud_resids)) + geom_point()
## Auumption 3: ----
# No Influential Value in predictors:
stud_resids <- studres(model_test)
ggplot(mapping = aes(x = probabilities , y = stud_resids)) + geom_point()
## Assumption 4: ----
# Multicollinearity:
car::vif(model_test)
ggplot(mapping = aes(x = index , y = stud_resids)) + geom_point()
library(broom)
## Auumption 3: ----
# Influential Value in predictors:
model.data <- augment(model_test) %>%
mutate(index = 1:n())
model.data %>% top_n(3, .cooksd)
## Auumption 3: ----
# Influential Value in predictors:
plot(model_test, which = 4, id.n = 3)
model.data <- augment(model_test) %>%
mutate(index = 1:n())
model.data %>% top_n(3, .cooksd)
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = diabetes), alpha = .5) +
theme_bw()
model.data %>%
filter(abs(.std.resid) > 3)
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = DEATH_EVENT), alpha = .5) +
theme_bw()
# a) Use the lda function with default priors to separate the Species using all other variables
(ldamod = lda(DEATH_EVENT ~ ., data= heartdata))
# b) Obtain the prediction vs. actual matrix
predict(ldamod)
table(Predicted=predict(ldamod)$class, Actual = iris$Species)
table(Predicted=predict(ldamod)$class, Actual = heartdata$DEATH_EVENT)
# Quadratic Discriminant Analysis:
qda.fit <- qda(DEATH_EVENT ~ ., data= heartdata)
qda.fit
qda.class <- predict(qda.fit)$class
table(qda.class,heartdata$DEATH_EVENT)
# a) Use the lda function with default priors to separate the Species using all other variables
(ldamod = lda(DEATH_EVENT ~ ., data= heartdata))
# grow tree
fit <- rpart(DEATH_EVENT ~ ., method="class", data=heartdata)
library(rpart)
# grow tree
fit <- rpart(DEATH_EVENT ~ ., method="class", data=heartdata)
# grow tree
fit_tree <- rpart(DEATH_EVENT ~ ., method="class", data=heartdata)
fit_tree # display the results
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex= 0.7)
# Misclassification error
(conf.matrix = table(heartdata$DEATH_EVENT, predict(fit_tree,type="class")))
1 - sum(diag(conf.matrix))/nrow(heartdata)
sum(diag(conf.matrix))/nrow(heartdata)
printcp(fit_tree)
fitp = prune(fit_tree, cp = 0.019608)
printcp(fitp)
plot(fitp) #plot smaller rpart object
text(fitp, use.n=TRUE, all=TRUE, cex=.8)
(conf.matrix.prune = table(heartdata$DEATH_EVENT, predict(fitp,type="class")))
sum(diag(conf.matrix.prune))/nrow(heartdata)
